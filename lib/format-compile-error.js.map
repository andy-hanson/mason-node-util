{"version":3,"sources":["format-compile-error.js","format-compile-error.ts"],"names":[],"mappings":"AAAA,CAAC,UAAU,OAAO,EAAE;AAChB,QAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,OAAO,MAAM,CAAC,OAAO,KAAK,QAAQ,EAAE;AAClE,YAAI,CAAC,GAAG,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,AAAC,IAAI,CAAC,KAAK,SAAS,EAAE,MAAM,CAAC,OAAO,GAAG,CAAC,CAAC;KAC9E,MACI,IAAI,OAAO,MAAM,KAAK,UAAU,IAAI,MAAM,CAAC,GAAG,EAAE;AACjD,cAAM,CAAC,CAAC,SAAS,EAAE,SAAS,EAAE,OAAO,CAAC,EAAE,OAAO,CAAC,CAAC;KACpD;CACJ,CAAA,CAAE,UAAU,OAAO,EAAE,OAAO,EAAE;AAC3B,gBAAY,CAAC;;ACRjB,QAAA,OAAA,GAAA,OAAA,CAA8C,OAE9C,CAAC,CAFoD;AAErD,aAAA,kBAAA,CAA2C,KAAU,EAAE,UAAkB,EAAA;AACxE,eAAO,MAAM,CAAC,KAAK,CAAC,YAAY,EAAE,UAAU,EAAE,OAAO,CAAC,CAAA;KACtD;AAFD,UAAA,CAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,KAAA,EAAA,IAAA,EAAA,CAAA,CAAA;ADYI,WAAO,CAAC,OAAO,GAAG,kBCVrB,CAAA;AAED,aAAA,aAAA,CAA8B,YAAiB,EAAE,UAAkB,EAAA;AAElE,eAAO,MAAM,CAAC,YAAY,EAAE,UAAU,EAAE,OAAO,CAAC,CAAA;KAChD;AAHe,WAAA,CAAA,aAAa,GAAA,aAG5B,CAAA;AAED,aAAA,MAAA,CAAgB,YAAiB,EAAE,UAAkB,EAAE,IAAY,EAAA;AAClE,YAAI,OAAO,GAAG,CAAA,GAAG,OAAA,CAAA,IAAI,CAAC,UAAU,CAAC,EAAA,EAAA,GAAK,OAAA,CAAA,OAAO,CAAC,IAAI,CAAC,EAAA,CAAA,GAAI,OAAA,CAAA,IAAI,CAAC,OAAA,CAAA,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,EAAA,CAAA,CAAG,CAAA;AAErF,aAAK,MAAM,CAAC,IAAI,YAAY,CAAC,YAAY,CAAC,OAAA,CAAA,KAAK,CAAC,EAC/C,OAAO,GAAG,OAAO,GAAG,CAAC,CAAA;AACtB,eAAO,OAAO,CAAA;KACd;CDQA,CAAC,CAAC","file":"format-compile-error.js","sourcesContent":["(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", 'chalk'], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var chalk_1 = require('chalk');\n    function formatCompileError(error, modulePath) {\n        return format(error.errorMessage, modulePath, 'error');\n    }\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = formatCompileError;\n    function formatWarning(errorMessage, modulePath) {\n        return format(errorMessage, modulePath, 'warn ');\n    }\n    exports.formatWarning = formatWarning;\n    function format(errorMessage, modulePath, kind) {\n        let message = `${chalk_1.blue(modulePath)}\\n${chalk_1.magenta(kind)} ${chalk_1.bold(chalk_1.red(errorMessage.loc))} `;\n        for (const _ of errorMessage.messageParts(chalk_1.green))\n            message = message + _;\n        return message;\n    }\n});\n","import {blue, bold, green, magenta, red} from 'chalk'\n\nexport default function formatCompileError(error: any, modulePath: string): string {\n\treturn format(error.errorMessage, modulePath, 'error')\n}\n\nexport function formatWarning(errorMessage: any, modulePath: string): string {\n\t// Extra space to match up with 'error'\n\treturn format(errorMessage, modulePath, 'warn ')\n}\n\nfunction format(errorMessage: any, modulePath: string, kind: string): string {\n\tlet message = `${blue(modulePath)}\\n${magenta(kind)} ${bold(red(errorMessage.loc))} `\n\t// TODO:ES6 Array.from(formatCode(...)) should work\n\tfor (const _ of errorMessage.messageParts(green))\n\t\tmessage = message + _\n\treturn message\n}\n"],"sourceRoot":"/source/"}