{"version":3,"sources":["register.js","register.ts"],"names":[],"mappings":"AAAA,CAAC,UAAU,OAAO,EAAE;AAChB,QAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,OAAO,MAAM,CAAC,OAAO,KAAK,QAAQ,EAAE;AAClE,YAAI,CAAC,GAAG,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,AAAC,IAAI,CAAC,KAAK,SAAS,EAAE,MAAM,CAAC,OAAO,GAAG,CAAC,CAAC;KAC9E,MACI,IAAI,OAAO,MAAM,KAAK,UAAU,IAAI,MAAM,CAAC,GAAG,EAAE;AACjD,cAAM,CAAC,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,oBAAoB,EAAE,0BAA0B,CAAC,EAAE,OAAO,CAAC,CAAC;KACnG;CACJ,CAAA,CAAE,UAAU,OAAO,EAAE,OAAO,EAAE;AAC3B,gBAAY,CAAC;;ACRjB,QAAA,IAAA,GAAA,OAAA,CAAyC,IACzC,CAAC,CAD4C;AAC7C,QAAA,oBAAA,GAAA,OAAA,CAAsB,oBACtB,CAAC,CADyC;AAC1C,QAAA,wBAAA,GAAA,OAAA,CAAgC,0BAIhC,CAAC,CAJyD;AAI1D,aAAA,QAAA,CAAiC,QAAa,EAAA;AAC7C,cAAM,UAAU,GAAG,IAAI,GAAG,EAAkB,CAAA;AAE5C,4BAAA,CAAA,OAAO,CAAC;AACP,6BAAiB,CAAC,MAAc,EAAA;AAC/B,sBAAM,CAAC,GAAG,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,CAAA;AAChC,uBAAO,CAAC,KAAK,SAAS,GAAG,IAAI,GAAG,EAAC,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,EAAC,CAAA;aACnD;SACD,CAAC,CAAA;AAEF,iBAAA,2BAAA,CAAqC,WAAmB,EAAE,QAAgB,EAAA;wCAC/C,wBAAA,CAAA,OAAmB,CAAC,QAAQ,EAAE,WAAW,EAAE,QAAQ,CAAC;;kBAAvE,IAAI,yBAAJ,IAAI;kBAAE,SAAS,yBAAT,SAAS;;AACtB,sBAAU,CAAC,GAAG,CAAC,IAAA,CAAA,YAAY,CAAC,QAAQ,CAAC,EAAE,SAAS,CAAC,CAAA;AACjD,mBAAO,IAAI,CAAA;SACX;AAED,eAAO,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,SAAc,EAAE,QAAgB,KAAA;AAC5D,kBAAM,EAAE,GAAG,IAAA,CAAA,YAAY,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAA;AAC1C,kBAAM,EAAE,GAAG,2BAA2B,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAA;AACpD,qBAAS,CAAC,QAAQ,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAA;SAChC,CAAA;KACD;AArBD,UAAA,CAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,KAAA,EAAA,IAAA,EAAA,CAAA,CAAA;AD0BI,WAAO,CAAC,OAAO,GAAG,QCLrB,CAAA;CDMA,CAAC,CAAC","file":"register.js","sourcesContent":["(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", 'fs', 'source-map-support', './compile-warn-and-throw'], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var fs_1 = require('fs');\n    var source_map_support_1 = require('source-map-support');\n    var compile_warn_and_throw_1 = require('./compile-warn-and-throw');\n    function register(compiler) {\n        const sourceMaps = new Map();\n        source_map_support_1.install({\n            retrieveSourceMap(source) {\n                const _ = sourceMaps.get(source);\n                return _ === undefined ? null : { url: null, map: _ };\n            }\n        });\n        function compileAndRegisterSourceMap(masonSource, filename) {\n            const { code, sourceMap } = compile_warn_and_throw_1.default(compiler, masonSource, filename);\n            sourceMaps.set(fs_1.realpathSync(filename), sourceMap);\n            return code;\n        }\n        require.extensions['.ms'] = (newModule, filename) => {\n            const ms = fs_1.readFileSync(filename, 'utf-8');\n            const js = compileAndRegisterSourceMap(ms, filename);\n            newModule._compile(js, filename);\n        };\n    }\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = register;\n});\n","import {readFileSync, realpathSync} from 'fs'\nimport {install} from 'source-map-support'\nimport compileWarnAndThrow from './compile-warn-and-throw'\n\n//todo: compiler is typed as 'any' because we don't directly depend on mason-compile\n\nexport default function register(compiler: any): void {\n\tconst sourceMaps = new Map<string, string>()\n\n\tinstall({\n\t\tretrieveSourceMap(source: string): {url: string, map: string} {\n\t\t\tconst _ = sourceMaps.get(source)\n\t\t\treturn _ === undefined ? null : {url: null, map: _}\n\t\t}\n\t})\n\n\tfunction compileAndRegisterSourceMap(masonSource: string, filename: string): string {\n\t\tconst {code, sourceMap} = compileWarnAndThrow(compiler, masonSource, filename)\n\t\tsourceMaps.set(realpathSync(filename), sourceMap)\n\t\treturn code\n\t}\n\n\trequire.extensions['.ms'] = (newModule: any, filename: string): any => {\n\t\tconst ms = readFileSync(filename, 'utf-8')\n\t\tconst js = compileAndRegisterSourceMap(ms, filename)\n\t\tnewModule._compile(js, filename)\n\t}\n}\n"],"sourceRoot":"/source/"}