{"version":3,"sources":["../src/list-modules.js"],"names":[],"mappings":";;;;;;;;4BAAsC,gBAAgB;;+BACnC,mBAAmB;;;;qBACvB,SAAS;;;;oBACD,MAAM;;4CAErB,kCAAkC;;qDACf,2CAA2C;;;;qDAC3C,2CAA2C;;;;yDAChD,gDAAgD;;;;2CACxC,iCAAiC;;oDACrC,0CAA0C;;;;;;;kBAIrD,CAAC,OAAO,EAAE,IAAI,KAC5B,gBAAG,QAAQ,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI;AAClC,OAAM,WAAW,GAAG,4CAAU,KAAK,EAAE,CAAC,IACrC,uCAAK,YAAY,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,MAC3B,CAAC,EAAE,GAAE,oBAAS,OAAO,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,CAAA;;AAE/D,YAAW,CAAC,IAAI,EAAE,CAAA;;AAElB,OAAM,GAAG,GAAG,wDAAuB,CAAA;;AAEnC,OAAM,UAAU,GAAG,4CAAc,GAAG,EAAE,WAAW,CAAC,GAAG,CAAC,CAAC,IAAI,oCAAM,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAA;AACpF,OAAM,SAAS,GAAG,sDAAwB,GAAG,EAC5C,+CAAiB,GAAG,EAAE,2CAAa,KAAK,CAAC,GAAG,EAAE,cAAc,CAAC,EAAE,UAAU,CAAC,EAC1E,IAAI,CAAC,CAAA;AACN,OAAM,MAAM,GAAG,yCAAW,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,SAAS,CAAC,CAAC,CAAA;AACnE,QAAO,+BAAO,yDAAU,oDAAmB,OAAO,CAAC,EAAE,MAAM,EAAE,oDAAmB,CAAC,CAAC,CAAA;CAClF,CAAC;;AAEH,MAAM,GAAG,GAAG,KAAK,CAAA;AACjB,MAAM,YAAY,GAAG,CAAC,IAAI,EAAE,IAAI,KAC/B,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA,AAAC,CAAA;AACjE,MAAM,OAAO,GAAG,oDAAmB;AAClC,gBAAe,EAAE,IAAI;AACrB,OAAM,EAAE,iBAAiB;AACzB,iBAAgB,EAAE,KAAK;AACvB,kBAAiB,EAAE,KAAK;AACxB,WAAU,EAAE,KAAK;CACjB,CAAC,CAAA","file":"list-modules.js","sourcesContent":["import {singleCharLoc, StartPos} from 'esast/dist/Loc'\nimport render from 'esast/dist/render'\nimport fs from 'q-io/fs'\nimport {relative} from 'path'\nimport {AssignSingle, BagSimple, LocalDeclare, Module, ModuleExportDefault, Quote\n\t} from 'mason-compile/dist/private/MsAst'\nimport CompileContext from 'mason-compile/dist/private/CompileContext'\nimport CompileOptions from 'mason-compile/dist/private/CompileOptions'\nimport transpile from 'mason-compile/dist/private/transpile/transpile'\nimport {flatOpMap, opIf} from 'mason-compile/dist/private/util'\nimport VerifyResults from 'mason-compile/dist/private/VerifyResults'\n\n// Searches a directory and creates a module whose default export is\n// a list of the paths of every module in that directory, relative to it.\nexport default (dirPath, opts) =>\n\tfs.listTree(dirPath).then(files => {\n\t\tconst moduleFiles = flatOpMap(files, _ =>\n\t\t\topIf(acceptModule(opts, _), () =>\n\t\t\t\t`./${relative(dirPath, _.slice(0, _.length - ext.length))}`))\n\t\t// Sort to keep it deterministic.\n\t\tmoduleFiles.sort()\n\t\t// Dummy Loc. We will not use source maps.\n\t\tconst loc = singleCharLoc(StartPos)\n\t\t// Sort to keep it deterministic.\n\t\tconst modulesBag = new BagSimple(loc, moduleFiles.map(_ => Quote.forString(loc, _)))\n\t\tconst exportBag = new ModuleExportDefault(loc,\n\t\t\tnew AssignSingle(loc, LocalDeclare.plain(loc, 'modules-list'), modulesBag),\n\t\t\tnull)\n\t\tconst module = new Module(loc, null, [], [], null, [], [exportBag])\n\t\treturn render(transpile(new CompileContext(options), module, new VerifyResults()))\n\t})\n\nconst ext = '.js'\nconst acceptModule = (opts, path) =>\n\tpath.endsWith(ext) && !(opts.exclude && opts.exclude.test(path))\nconst options = new CompileOptions({\n\tincludeAmdefine: true,\n\tinFile: 'modules-list.ms',\n\tincludeSourceMap: false,\n\tincludeModuleName: false,\n\timportBoot: false\n})\n"]}