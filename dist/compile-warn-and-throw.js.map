{"version":3,"sources":["../src/compile-warn-and-throw.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;mBAKwB,mBAAmB;SAI3B,iBAAiB,GAAjB,iBAAiB;;;;;;;;;;UAJT,mBAAmB;;;;UAI3B,iBAAiB","file":"compile-warn-and-throw.js","sourcesContent":["import {warn} from 'console'\nimport compile, {parseAst} from 'mason-compile/dist/compile'\nimport CompileError from 'mason-compile/dist/CompileError'\nimport formatCompileError, {formatWarning} from './format-compile-error'\n\nexport default function compileWarnAndThrow(string, inFile, opts) {\n\treturn handle(compile, string, inFile, opts)\n}\n\nexport function parseWarnAndThrow(string, inFile, opts) {\n\treturn handle(parseAst, string, inFile, opts)\n}\n\nfunction handle(func, string, inFile, opts) {\n\tconst {warnings, result} = func(string, Object.assign({inFile}, opts))\n\n\tfor (let warning of warnings)\n\t\twarn(formatWarning(warning, inFile))\n\n\tif (result instanceof CompileError) {\n\t\tsetErrorMessage(result, inFile)\n\t\tthrow result\n\t}\n\treturn result\n}\n\nfunction setErrorMessage(error, modulePath) {\n\tconst formatted = formatCompileError(error, modulePath)\n\terror.stack = error.stack.replace(error.message, formatted)\n\terror.message = formatted\n}\n"]}