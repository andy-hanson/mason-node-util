{"version":3,"sources":["../src/format-compile-error.js"],"names":[],"mappings":";;;;;kBAIwB,kBAAkB;;qBAJD,OAAO;;4CACd,iCAAiC;;2CAChD,iCAAiC;;AAErC,SAAS,kBAAkB,CAAC,KAAK,EAAE,UAAU,EAAE;AAC7D,QAAO,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,UAAU,EAAE,OAAO,CAAC,CAAA;CACjD;;AAEM,MAAM,aAAa,GAAG,CAAC,OAAO,EAAE,UAAU,KAAK;AACrD,wCAAK,OAAO,yCAAW,UAAU,EAAE,MAAM,CAAC,CAAA;;AAE1C,QAAO,MAAM,CAAC,OAAO,EAAE,UAAU,EAAE,OAAO,CAAC,CAAA;CAC3C,CAAA;;;AAED,MAAM,MAAM,GAAG,CAAC,OAAO,EAAE,UAAU,EAAE,IAAI,KAAK;AAC7C,KAAI,OAAO,GAAG,CAAC,GAAE,iBAAK,UAAU,CAAC,EAAC,EAAE,GAAE,oBAAQ,IAAI,CAAC,EAAC,CAAC,GAAE,YAAK,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,EAAC,CAAC,CAAC,CAAA;;AAE/E,MAAK,MAAM,CAAC,IAAI,8CAAW,OAAO,CAAC,OAAO,eAAQ,EACjD,OAAO,GAAG,OAAO,GAAG,CAAC,CAAA;AACtB,QAAO,OAAO,CAAA;CACd,CAAA","file":"format-compile-error.js","sourcesContent":["import {blue, bold, green, magenta} from 'chalk'\nimport {Warning, formatCode} from 'mason-compile/dist/CompileError'\nimport {type} from 'mason-compile/dist/private/util'\n\nexport default function formatCompileError(error, modulePath) {\n\treturn format(error.warning, modulePath, 'error')\n}\n\nexport const formatWarning = (warning, modulePath) => {\n\ttype(warning, Warning, modulePath, String)\n\t// Extra space to match up with 'error'\n\treturn format(warning, modulePath, 'warn ')\n}\n\nconst format = (warning, modulePath, kind) => {\n\tlet message = `${blue(modulePath)}\\n${magenta(kind)} ${bold.red(warning.loc)} `\n\t// TODO:ES6 Array.from(formatCode(...)) should work\n\tfor (const _ of formatCode(warning.message, green))\n\t\tmessage = message + _\n\treturn message\n}\n"]}