{"version":3,"sources":["../src/register.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;mBAMwB,QAAQ;;;;;;;;;;;;UAAR,QAAQ","file":"register.js","sourcesContent":["import {readFileSync, realpathSync} from 'fs'\nimport {install, retrieveSourceMap as oldRetrieveSourceMap} from 'source-map-support'\nimport compileWarnAndThrow from './compile-warn-and-throw'\n\nconst sourceMaps = new Map()\n\nexport default function register(compiler) {\n\tregisteredCompiler = compiler\n\trequire.extensions['.ms'] = (newModule, filename) => {\n\t\tconst ms = readFileSync(filename, 'utf-8')\n\t\tconst js = compileAndRegisterSourceMap(ms, filename)\n\t\tnewModule._compile(js, filename)\n\t}\n}\n\ninstall({\n\tretrieveSourceMap(source) {\n\t\tconst _ = sourceMaps.get(source)\n\t\treturn _ === undefined ? oldRetrieveSourceMap(source) : {url: null, map: _}\n\t}\n})\n\nlet registeredCompiler = null\n\nfunction compileAndRegisterSourceMap(msCode, filename) {\n\tconst {code, sourceMap} = compileWarnAndThrow(registeredCompiler, msCode, filename)\n\tsourceMaps.set(realpathSync(filename), sourceMap)\n\treturn code\n}\n"]}